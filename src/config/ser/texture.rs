use glium::{
    texture::MipmapsOption,
    uniforms::{MagnifySamplerFilter, MinifySamplerFilter, Sampler, SamplerWrapFunction},
};
use serde::Deserialize;

#[derive(Deserialize, Debug, Clone)]
pub enum TextureKind {
    File(String),
}

fn wrap() -> SamplerWrapFunction {
    SamplerWrapFunction::Repeat
}

fn minify_filter() -> MinifySamplerFilter {
    MinifySamplerFilter::Linear
}

fn magnify_filter() -> MagnifySamplerFilter {
    MagnifySamplerFilter::Linear
}

#[derive(Deserialize, Debug, Clone)]
pub struct Texture {
    pub name: String,
    pub kind: TextureKind,
    #[serde(with = "SamplerWrapFunctionDef")]
    #[serde(default = "wrap")]
    pub wrap: SamplerWrapFunction,
    #[serde(with = "MinifySamplerFilterDef")]
    #[serde(default = "minify_filter")]
    pub minify_filter: MinifySamplerFilter,
    #[serde(with = "MagnifySamplerFilterDef")]
    #[serde(default = "magnify_filter")]
    pub magnify_filter: MagnifySamplerFilter,
    #[serde(default)]
    pub anisotropy: Option<u16>,
    #[serde(default)]
    pub mipmaps: Mipmaps,
}

impl Texture {
    pub fn apply_to_sampler<'t, T>(&self, sampler: Sampler<'t, T>) -> Sampler<'t, T> {
        let res = sampler
            .wrap_function(self.wrap)
            .minify_filter(self.minify_filter)
            .magnify_filter(self.magnify_filter);

        if let Some(x) = self.anisotropy {
            res.anisotropy(x)
        } else {
            res
        }
    }
}

#[derive(Deserialize)]
#[serde(rename_all = "snake_case")]
#[serde(remote = "SamplerWrapFunction")]
pub enum SamplerWrapFunctionDef {
    Repeat,
    Mirror,
    Clamp,
    BorderClamp,
    MirrorClamp,
}

#[derive(Deserialize)]
#[serde(rename_all = "snake_case")]
#[serde(remote = "MinifySamplerFilter")]
pub enum MinifySamplerFilterDef {
    Nearest,
    Linear,
    NearestMipmapNearest,
    LinearMipmapNearest,
    NearestMipmapLinear,
    LinearMipmapLinear,
}

#[derive(Deserialize)]
#[serde(rename_all = "snake_case")]
#[serde(remote = "MagnifySamplerFilter")]
pub enum MagnifySamplerFilterDef {
    Nearest,
    Linear,
}

#[derive(Deserialize, Debug, Clone, Copy)]
#[serde(rename_all = "snake_case")]
pub enum Mipmaps {
    None,
    Empty,
    EmptyAmount(u32),
    Generate,
    GenerateAmount(u32),
}

impl From<Mipmaps> for MipmapsOption {
    fn from(m: Mipmaps) -> Self {
        match m {
            Mipmaps::None => MipmapsOption::NoMipmap,
            Mipmaps::Empty => MipmapsOption::EmptyMipmaps,
            Mipmaps::EmptyAmount(x) => MipmapsOption::EmptyMipmapsMax(x),
            Mipmaps::Generate => MipmapsOption::AutoGeneratedMipmaps,
            Mipmaps::GenerateAmount(x) => MipmapsOption::AutoGeneratedMipmapsMax(x),
        }
    }
}

impl Default for Mipmaps {
    fn default() -> Self {
        Mipmaps::None
    }
}
